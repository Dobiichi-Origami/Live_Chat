// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: micro_call.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerNodeClient is the client API for ServerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerNodeClient interface {
	KickUserOffOnSpecificPlatform(ctx context.Context, in *KickOffRequest, opts ...grpc.CallOption) (*Response, error)
	BroadcastNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*Response, error)
	BroadcastMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Response, error)
}

type serverNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewServerNodeClient(cc grpc.ClientConnInterface) ServerNodeClient {
	return &serverNodeClient{cc}
}

func (c *serverNodeClient) KickUserOffOnSpecificPlatform(ctx context.Context, in *KickOffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ServerNode/KickUserOffOnSpecificPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) BroadcastNotification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ServerNode/BroadcastNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) BroadcastMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ServerNode/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerNodeServer is the server API for ServerNode service.
// All implementations must embed UnimplementedServerNodeServer
// for forward compatibility
type ServerNodeServer interface {
	KickUserOffOnSpecificPlatform(context.Context, *KickOffRequest) (*Response, error)
	BroadcastNotification(context.Context, *NotificationRequest) (*Response, error)
	BroadcastMessage(context.Context, *MessageRequest) (*Response, error)
	mustEmbedUnimplementedServerNodeServer()
}

// UnimplementedServerNodeServer must be embedded to have forward compatible implementations.
type UnimplementedServerNodeServer struct {
}

func (UnimplementedServerNodeServer) KickUserOffOnSpecificPlatform(context.Context, *KickOffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUserOffOnSpecificPlatform not implemented")
}
func (UnimplementedServerNodeServer) BroadcastNotification(context.Context, *NotificationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNotification not implemented")
}
func (UnimplementedServerNodeServer) BroadcastMessage(context.Context, *MessageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedServerNodeServer) mustEmbedUnimplementedServerNodeServer() {}

// UnsafeServerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerNodeServer will
// result in compilation errors.
type UnsafeServerNodeServer interface {
	mustEmbedUnimplementedServerNodeServer()
}

func RegisterServerNodeServer(s grpc.ServiceRegistrar, srv ServerNodeServer) {
	s.RegisterService(&ServerNode_ServiceDesc, srv)
}

func _ServerNode_KickUserOffOnSpecificPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).KickUserOffOnSpecificPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServerNode/KickUserOffOnSpecificPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).KickUserOffOnSpecificPlatform(ctx, req.(*KickOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_BroadcastNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).BroadcastNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServerNode/BroadcastNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).BroadcastNotification(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServerNode/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).BroadcastMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerNode_ServiceDesc is the grpc.ServiceDesc for ServerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerNode",
	HandlerType: (*ServerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickUserOffOnSpecificPlatform",
			Handler:    _ServerNode_KickUserOffOnSpecificPlatform_Handler,
		},
		{
			MethodName: "BroadcastNotification",
			Handler:    _ServerNode_BroadcastNotification_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _ServerNode_BroadcastMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro_call.proto",
}
