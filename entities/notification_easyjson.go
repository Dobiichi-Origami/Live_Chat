// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9806e1DecodeLiveChatEntities(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SenderId":
			out.SenderId = int64(in.Int64())
		case "ReceiverId":
			out.ReceiverId = int64(in.Int64())
		case "Seq":
			out.Seq = uint64(in.Uint64())
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "OpType":
			out.OpType = uint8(in.Uint8())
		case "ReceiveType":
			out.ReceiveType = uint8(in.Uint8())
		case "IsHandled":
			out.IsHandled = bool(in.Bool())
		case "IsAgree":
			out.IsAgree = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeLiveChatEntities(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SenderId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.SenderId))
	}
	{
		const prefix string = ",\"ReceiverId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReceiverId))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Seq))
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"OpType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.OpType))
	}
	{
		const prefix string = ",\"ReceiveType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ReceiveType))
	}
	{
		const prefix string = ",\"IsHandled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHandled))
	}
	{
		const prefix string = ",\"IsAgree\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgree))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeLiveChatEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeLiveChatEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeLiveChatEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeLiveChatEntities(l, v)
}
